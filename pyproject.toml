[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "dna-origami-autoencoder"
description = "A groundbreaking wet-lab ML framework that encodes images into self-assembling DNA origami structures"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@example.com"},
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Chemistry",
]
keywords = [
    "dna",
    "origami",
    "machine-learning",
    "biocomputing",
    "synthetic-biology",
    "nanotechnology",
    "information-storage",
    "neural-networks",
    "molecular-dynamics",
    "bioinformatics",
]
requires-python = ">=3.9"
dependencies = [
    # Core scientific computing
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    
    # Machine learning
    "scikit-learn>=1.0.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "transformers>=4.20.0",
    "datasets>=2.0.0",
    "accelerate>=0.20.0",
    "lightning>=2.0.0",
    
    # Bioinformatics
    "biopython>=1.79",
    "mdanalysis>=2.0.0",
    "nglview>=3.0.0",
    
    # Chemistry and molecular modeling
    "rdkit>=2022.03.0",
    "openmm>=7.7.0",
    
    # Image processing
    "pillow>=8.0.0",
    "opencv-python>=4.5.0",
    "scikit-image>=0.18.0",
    
    # Data handling
    "h5py>=3.1.0",
    "netcdf4>=1.5.0",
    "zarr>=2.10.0",
    "pyarrow>=5.0.0",
    
    # Numerical computation
    "numba>=0.56.0",
    "networkx>=2.6.0",
    
    # Configuration and logging
    "pydantic>=1.8.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "rich>=10.0.0",
    "loguru>=0.6.0",
    
    # Progress bars and utilities
    "tqdm>=4.62.0",
    "joblib>=1.1.0",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/danieleschmidt/dna-origami-autoencoder"
Documentation = "https://dna-origami-ae.readthedocs.io"
Repository = "https://github.com/danieleschmidt/dna-origami-autoencoder.git"
Issues = "https://github.com/danieleschmidt/dna-origami-autoencoder/issues"
Changelog = "https://github.com/danieleschmidt/dna-origami-autoencoder/blob/main/CHANGELOG.md"

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=2.5.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.8.0",
    "coverage[toml]>=6.0.0",
    
    # Code quality
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "flake8-docstrings>=1.6.0",
    "flake8-bugbear>=22.0.0",
    "mypy>=0.990",
    "pre-commit>=2.20.0",
    
    # Security
    "bandit>=1.7.0",
    "safety>=2.0.0",
    
    # Documentation
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
    
    # Jupyter and notebooks
    "jupyter>=1.0.0",
    "jupyterlab>=3.4.0",
    "ipywidgets>=8.0.0",
    "notebook>=6.4.0",
    
    # Profiling and debugging
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
]

# Machine learning extras
ml = [
    "wandb>=0.13.0",
    "tensorboard>=2.9.0",
    "optuna>=3.0.0",
    "ray[tune]>=2.0.0",
    "torchmetrics>=0.9.0",
    "torchinfo>=1.7.0",
]

# Molecular dynamics extras
md = [
    "mdanalysis>=2.0.0",
    "nglview>=3.0.0",
    "pytraj>=2.0.0",
    "prody>=2.3.0",
    "pdbfixer>=1.8.0",
]

# Wet-lab integration extras
wetlab = [
    "opentrons>=6.0.0",
    "platereader>=1.0.0",
    "bioformats>=1.0.0",
    "microscopy-utils>=0.5.0",
]

# High-performance computing extras
hpc = [
    "dask[complete]>=2022.7.0",
    "distributed>=2022.7.0",
    "cupy-cuda12x>=11.0.0",
    "rapids-cudf>=22.0.0",
    "rapids-cuml>=22.0.0",
]

# All extras combined
all = [
    "dna-origami-autoencoder[dev,ml,md,wetlab,hpc]"
]

[project.scripts]
dna-origami-ae = "dna_origami_ae.cli:main"

[project.entry-points."dna_origami_ae.encoders"]
base4 = "dna_origami_ae.encoding:Base4Encoder"
goldman = "dna_origami_ae.encoding:GoldmanEncoder"
church = "dna_origami_ae.encoding:ChurchEncoder"

[project.entry-points."dna_origami_ae.decoders"]
transformer = "dna_origami_ae.decoding:TransformerDecoder"
cnn = "dna_origami_ae.decoding:CNNDecoder"

[project.entry-points."dna_origami_ae.simulators"]
oxdna = "dna_origami_ae.simulation:OxDNASimulator"
lammps = "dna_origami_ae.simulation:LAMMPSSimulator"

# =============================================================================
# Tool Configuration
# =============================================================================

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["dna_origami_ae*"]
exclude = ["tests*", "docs*", "examples*", "scripts*"]

[tool.setuptools.package-data]
dna_origami_ae = [
    "data/*.json",
    "data/*.yaml",
    "data/*.csv",
    "templates/*.json",
    "templates/*.yaml",
    "configs/*.yaml",
]

[tool.setuptools_scm]
write_to = "dna_origami_ae/_version.py"

# =============================================================================
# Black Configuration
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data
  | models
  | results
)/
'''

# =============================================================================
# isort Configuration
# =============================================================================

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "*/data/*",
    "*/models/*",
    "*/results/*",
    "*/build/*",
    "*/dist/*",
]

# =============================================================================
# Coverage Configuration
# =============================================================================

[tool.coverage.run]
source = ["dna_origami_ae"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/setup.py",
    "*/conftest.py",
    "*/experiments/*",
    "*/scripts/*",
    "*/data/*",
    "*/models/*",
    "*/results/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "@abstract",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# =============================================================================
# MyPy Configuration
# =============================================================================

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "sklearn.*",
    "torch.*",
    "torchvision.*",
    "transformers.*",
    "datasets.*",
    "Bio.*",
    "MDAnalysis.*",
    "nglview.*",
    "rdkit.*",
    "openmm.*",
    "cv2.*",
    "skimage.*",
    "h5py.*",
    "netCDF4.*",
    "zarr.*",
    "numba.*",
    "networkx.*",
    "wandb.*",
    "tensorboard.*",
    "optuna.*",
    "ray.*",
]
ignore_missing_imports = true

# =============================================================================
# Pytest Configuration
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=dna_origami_ae",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance/benchmark tests",
    "slow: Slow running tests",
    "gpu: Tests requiring GPU",
    "experimental: Experimental features",
    "molecular_dynamics: MD simulation tests",
    "neural_network: Neural network/ML tests", 
    "wet_lab: Wet lab protocol tests",
    "encoding: DNA encoding tests",
    "decoding: DNA decoding tests",
    "design: Origami design tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# =============================================================================
# Bandit Configuration
# =============================================================================

[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts", "experiments"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process

# =============================================================================
# Ruff Configuration (Alternative to flake8)
# =============================================================================

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E203", # whitespace before ':'
    "E501", # line too long (handled by black)
    "W503", # line break before binary operator
]
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
    "data",
    "models",
    "results",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["B011"]      # Allow assert False in tests

[tool.ruff.isort]
known-first-party = ["dna_origami_ae"]